// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/powerman/go-service-goswagger-clean-example/internal/app"
)

// GetContactsHandlerFunc turns a function with the right signature into a get contacts handler
type GetContactsHandlerFunc func(GetContactsParams, *app.Auth) GetContactsResponder

// Handle executing the request and returning a response
func (fn GetContactsHandlerFunc) Handle(params GetContactsParams, principal *app.Auth) GetContactsResponder {
	return fn(params, principal)
}

// GetContactsHandler interface for that can handle valid get contacts params
type GetContactsHandler interface {
	Handle(GetContactsParams, *app.Auth) GetContactsResponder
}

// NewGetContacts creates a new http.Handler for the get contacts operation
func NewGetContacts(ctx *middleware.Context, handler GetContactsHandler) *GetContacts {
	return &GetContacts{Context: ctx, Handler: handler}
}

/*GetContacts swagger:route GET /contacts getContacts

List contacts

*/
type GetContacts struct {
	Context *middleware.Context
	Handler GetContactsHandler
}

func (o *GetContacts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetContactsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *app.Auth
	if uprinc != nil {
		principal = uprinc.(*app.Auth) // this is really a app.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
